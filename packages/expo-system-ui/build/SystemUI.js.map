{"version":3,"file":"SystemUI.js","sourceRoot":"","sources":["../src/SystemUI.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { ColorValue } from 'react-native';\n\nimport ExpoSystemUI from './ExpoSystemUI';\n\nconst assertIsOnPlatform = (functionName: string, onlyAvailableOn: typeof Platform['OS'][]) => {\n  if (!onlyAvailableOn.includes(Platform.OS)) {\n    throw new Error(\n      `\"${functionName}\" is only available on ${onlyAvailableOn.join(' or ')}! OS: ${Platform.OS}`\n    );\n  }\n};\n\n/**\n * * \"light\": Light Mode\n * * \"dark\": Dark/Night Mode\n * * \"auto\": Follow System mode, automatically switch to dark mode.\n * * \"unspecified\": Default\n */\nexport type Appearance = 'light' | 'dark' | 'auto' | 'unspecified';\n\n/**\n * Configures the device's System UI.\n *\n * On Android, the System UI contains the Navigation Bar and Status Bar, on iOS this contains the Home Indicator and Status Bar.\n */\nexport const SystemUI = {\n  /**\n   * Changes the Android Status Bar's background color.\n   * @example\n   * ```typescript\n   * SystemUI.setStatusBarBackgroundColor(\"white\");\n   * ```\n   */\n  setStatusBarBackgroundColor: (color: ColorValue): Promise<void> => {\n    assertIsOnPlatform('setStatusBarBackgroundColor', ['android']);\n    return ExpoSystemUI.setStatusBarBackgroundColor(color);\n  },\n  /**\n   * Gets the Android Status Bar's background color.\n   * @example\n   * ```typescript\n   * const color = await SystemUI.getStatusBarBackgroundColor();\n   * ```\n   */\n  getStatusBarBackgroundColor: (): Promise<ColorValue> => {\n    assertIsOnPlatform('getStatusBarBackgroundColor', ['android']);\n    return ExpoSystemUI.getStatusBarBackgroundColor();\n  },\n\n  /**\n   * Changes the Android Navigation Bar's background color.\n   * @example\n   * ```typescript\n   * SystemUI.setNavigationBarBackgroundColor(\"white\");\n   * ```\n   */\n  setNavigationBarBackgroundColor: (color: ColorValue): Promise<void> => {\n    assertIsOnPlatform('setNavigationBarBackgroundColor', ['android']);\n    return ExpoSystemUI.setNavigationBarBackgroundColor(color);\n  },\n  /**\n   * Gets the Android Navigation Bar's background color.\n   * @example\n   * ```typescript\n   * const color = await SystemUI.getNavigationBarBackgroundColor();\n   * ```\n   */\n  getNavigationBarBackgroundColor: (): Promise<ColorValue> => {\n    assertIsOnPlatform('getNavigationBarBackgroundColor', ['android']);\n    return ExpoSystemUI.getNavigationBarBackgroundColor();\n  },\n\n  /**\n   * Changes the Android Navigation Bar's Divider color.\n   * @example\n   * ```typescript\n   * SystemUI.setNavigationBarDividerColor(\"red\");\n   * ```\n   */\n  setNavigationBarDividerColor: (color: ColorValue): Promise<void> => {\n    assertIsOnPlatform('setNavigationBarDividerColor', ['android']);\n    return ExpoSystemUI.setNavigationBarDividerColor(color);\n  },\n  /**\n   * Gets the Android Navigation Bar's Divider color.\n   * @example\n   * ```typescript\n   * const color = await SystemUI.getNavigationBarDividerColor();\n   * ```\n   */\n  getNavigationBarDividerColor: (): Promise<ColorValue> => {\n    assertIsOnPlatform('getNavigationBarDividerColor', ['android']);\n    return ExpoSystemUI.getNavigationBarDividerColor();\n  },\n\n  /**\n   * Changes the Android Navigation Bar visibility.\n   *\n   * @example\n   * ```typescript\n   * SystemUI.setVisibility(\"hidden\");\n   * ```\n   */\n  setNavigationBarVisibility: (visibility: 'visible' | 'hidden'): Promise<void> => {\n    assertIsOnPlatform('setSystemUiVisibility', ['android']);\n    return ExpoSystemUI.setSystemUiVisibility(visibility);\n  },\n\n  /**\n   * Changes the Android Navigation Bar's foreground style.\n   *\n   * @example\n   * ```typescript\n   * SystemUI.setNavigationBarForegroundStyle(\"light\");\n   * ```\n   */\n  setNavigationBarForegroundStyle: (style: 'light' | 'dark'): Promise<void> => {\n    assertIsOnPlatform('setNavigationBarForegroundStyle', ['android']);\n    return ExpoSystemUI.setNavigationBarForegroundStyle(style);\n  },\n  /**\n   * Gets the Android Navigation Bar's foreground style.\n   *\n   * @example\n   * ```typescript\n   * const style = await SystemUI.getNavigationBarForegroundStyle();\n   * ```\n   */\n  getNavigationBarForegroundStyle: (): Promise<'light' | 'dark'> => {\n    assertIsOnPlatform('getNavigationBarForegroundStyle', ['android']);\n    return ExpoSystemUI.getNavigationBarForegroundStyle();\n  },\n\n  /**\n   * Changes the Android Status Bar's foreground style.\n   *\n   * @example\n   * ```typescript\n   * SystemUI.setStatusBarForegroundStyle(\"light\");\n   * ```\n   */\n  setStatusBarForegroundStyle: (style: 'light' | 'dark'): Promise<void> => {\n    assertIsOnPlatform('setStatusBarForegroundStyle', ['android']);\n    return ExpoSystemUI.setStatusBarForegroundStyle(style);\n  },\n  /**\n   * Gets the Android Status Bar's foreground style.\n   *\n   * @example\n   * ```typescript\n   * const style = await SystemUI.getStatusBarForegroundStyle();\n   * ```\n   */\n  getStatusBarForegroundStyle: (): Promise<'light' | 'dark'> => {\n    assertIsOnPlatform('getStatusBarForegroundStyle', ['android']);\n    return ExpoSystemUI.getStatusBarForegroundStyle();\n  },\n\n  // FIXME(Marc): Setting appearance crashes on Android because of RNScreens.\n  //  See `SystemUIModule.kt`'s `setAppearance` function for details.\n  // /**\n  //  * Sets the App's appearance.\n  //  *\n  //  * @example\n  //  * ```typescript\n  //  * SystemUI.setAppearance(\"dark\");\n  //  * ```\n  //  */\n  // setAppearance: (appearance: Appearance): Promise<void> => {\n  //   assertIsOnPlatform('setAppearance', ['android']);\n  //   return ExpoSystemUI.setAppearance(appearance);\n  // },\n  // /**\n  //  * Gets the App's appearance.\n  //  * @example\n  //  * ```typescript\n  //  * const appearance = await SystemUI.getAppearance();\n  //  * ```\n  //  */\n  // getAppearance: (): Promise<Appearance> => {\n  //   assertIsOnPlatform('getAppearance', ['android']);\n  //   return ExpoSystemUI.getAppearance();\n  // },\n};\n"]}