{"version":3,"file":"SystemUI.js","sourceRoot":"","sources":["../src/SystemUI.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { ColorValue } from 'react-native';\n\nimport ExpoSystemUI from './ExpoSystemUI';\n\nconst assertIsOnPlatform = (functionName: string, onlyAvailableOn: typeof Platform['OS'][]) => {\n  if (!onlyAvailableOn.includes(Platform.OS)) {\n    throw new Error(\n      `\"${functionName}\" is only available on ${onlyAvailableOn.join(' or ')}! OS: ${Platform.OS}`\n    );\n  }\n};\n\n/**\n * * \"light\": Light Mode\n * * \"dark\": Dark/Night Mode\n * * \"auto\": Follow System mode, automatically switch to dark mode.\n * * \"unspecified\": Default\n */\n// export type Appearance = 'light' | 'dark' | 'auto' | 'default';\n\n/**\n * Changes the Android Status Bar's background color.\n * @example\n * ```typescript\n * SystemUI.setStatusBarBackgroundColor(\"white\");\n * ```\n */\nexport function setStatusBarBackgroundColor(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setStatusBarBackgroundColor', ['android']);\n  return ExpoSystemUI.setStatusBarBackgroundColor(color);\n}\n/**\n * Gets the Android Status Bar's background color.\n * @example\n * ```typescript\n * const color = await SystemUI.getStatusBarBackgroundColor();\n * ```\n */\nexport function getStatusBarBackgroundColor(): Promise<ColorValue> {\n  assertIsOnPlatform('getStatusBarBackgroundColor', ['android']);\n  return ExpoSystemUI.getStatusBarBackgroundColor();\n}\n\n/**\n * Changes the Android Navigation Bar's background color.\n * @example\n * ```typescript\n * SystemUI.setNavigationBarBackgroundColor(\"white\");\n * ```\n */\nexport function setNavigationBarBackgroundColor(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setNavigationBarBackgroundColor', ['android']);\n  return ExpoSystemUI.setNavigationBarBackgroundColor(color);\n}\n/**\n * Gets the Android Navigation Bar's background color.\n * @example\n * ```typescript\n * const color = await SystemUI.getNavigationBarBackgroundColor();\n * ```\n */\nexport function getNavigationBarBackgroundColor(): Promise<ColorValue> {\n  assertIsOnPlatform('getNavigationBarBackgroundColor', ['android']);\n  return ExpoSystemUI.getNavigationBarBackgroundColor();\n}\n\n/**\n * Changes the Android Navigation Bar's Divider color.\n * @example\n * ```typescript\n * SystemUI.setNavigationBarDividerColor(\"red\");\n * ```\n */\nexport function setNavigationBarDividerColor(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setNavigationBarDividerColor', ['android']);\n  return ExpoSystemUI.setNavigationBarDividerColor(color);\n}\n/**\n * Gets the Android Navigation Bar's Divider color.\n * @example\n * ```typescript\n * const color = await SystemUI.getNavigationBarDividerColor();\n * ```\n */\nexport function getNavigationBarDividerColor(): Promise<ColorValue> {\n  assertIsOnPlatform('getNavigationBarDividerColor', ['android']);\n  return ExpoSystemUI.getNavigationBarDividerColor();\n}\n\n/**\n * Changes the Android Navigation Bar's visibility.\n *\n * @example\n * ```typescript\n * SystemUI.setNavigationBarVisibility(\"hidden\");\n * ```\n */\nexport function setNavigationBarVisibility(visibility: 'visible' | 'hidden'): Promise<void> {\n  assertIsOnPlatform('setNavigationBarVisibility', ['android']);\n  return ExpoSystemUI.setNavigationBarVisibility(visibility);\n}\n\n/**\n * Changes the Android Status Bar's visibility.\n *\n * @example\n * ```typescript\n * SystemUI.setStatusBarVisibility(\"hidden\");\n * ```\n */\nexport function setStatusBarVisibility(visibility: 'visible' | 'hidden'): Promise<void> {\n  assertIsOnPlatform('setStatusBarVisibility', ['android']);\n  return ExpoSystemUI.setStatusBarVisibility(visibility);\n}\n\n/**\n * Changes the Android Navigation Bar's foreground style.\n *\n * @example\n * ```typescript\n * SystemUI.setNavigationBarForegroundStyle(\"light\");\n * ```\n */\nexport function setNavigationBarForegroundStyle(style: 'light' | 'dark'): Promise<void> {\n  assertIsOnPlatform('setNavigationBarForegroundStyle', ['android']);\n  return ExpoSystemUI.setNavigationBarForegroundStyle(style);\n}\n/**\n * Gets the Android Navigation Bar's foreground style.\n *\n * @example\n * ```typescript\n * const style = await SystemUI.getNavigationBarForegroundStyle();\n * ```\n */\nexport function getNavigationBarForegroundStyle(): Promise<'light' | 'dark'> {\n  assertIsOnPlatform('getNavigationBarForegroundStyle', ['android']);\n  return ExpoSystemUI.getNavigationBarForegroundStyle();\n}\n\n/**\n * Changes the Android Status Bar's foreground style.\n *\n * @example\n * ```typescript\n * SystemUI.setStatusBarForegroundStyle(\"light\");\n * ```\n */\nexport function setStatusBarForegroundStyle(style: 'light' | 'dark'): Promise<void> {\n  assertIsOnPlatform('setStatusBarForegroundStyle', ['android']);\n  return ExpoSystemUI.setStatusBarForegroundStyle(style);\n}\n/**\n * Gets the Android Status Bar's foreground style.\n *\n * @example\n * ```typescript\n * const style = await SystemUI.getStatusBarForegroundStyle();\n * ```\n */\nexport function getStatusBarForegroundStyle(): Promise<'light' | 'dark'> {\n  assertIsOnPlatform('getStatusBarForegroundStyle', ['android']);\n  return ExpoSystemUI.getStatusBarForegroundStyle();\n}\n\n// FIXME(Marc): Setting appearance crashes on Android because of RNScreens.\n//  See `SystemUIModule.kt`'s `setAppearance` function for details.\n// /**\n//  * Sets the App's appearance.\n//  *\n//  * @example\n//  * ```typescript\n//  * SystemUI.setAppearance(\"dark\");\n//  * ```\n//  */\n// setAppearance: (appearance: Appearance): Promise<void> => {\n//   assertIsOnPlatform('setAppearance', ['android']);\n//   return ExpoSystemUI.setAppearance(appearance);\n// },\n// /**\n//  * Gets the App's appearance.\n//  * @example\n//  * ```typescript\n//  * const appearance = await SystemUI.getAppearance();\n//  * ```\n//  */\n// getAppearance: (): Promise<Appearance> => {\n//   assertIsOnPlatform('getAppearance', ['android']);\n//   return ExpoSystemUI.getAppearance();\n// },\n"]}