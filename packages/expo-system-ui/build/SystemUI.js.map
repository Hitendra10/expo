{"version":3,"file":"SystemUI.js","sourceRoot":"","sources":["../src/SystemUI.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAG7C,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,MAAM,kBAAkB,GAAG,CAAC,YAAoB,EAAE,eAAwC,EAAE,EAAE;IAC5F,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;QAC1C,MAAM,IAAI,KAAK,CACb,IAAI,YAAY,0BAA0B,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,QAAQ,CAAC,EAAE,EAAE,CAC7F,CAAC;KACH;AACH,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG;IACtB;;;;;;OAMG;IACH,iBAAiB,EAAE,CAAC,KAAiB,EAAiB,EAAE;QACtD,kBAAkB,CAAC,mBAAmB,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QACrD,OAAO,YAAY,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IACD;;;;;;OAMG;IACH,iBAAiB,EAAE,GAAwB,EAAE;QAC3C,kBAAkB,CAAC,mBAAmB,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QACrD,OAAO,YAAY,CAAC,iBAAiB,EAAE,CAAC;IAC1C,CAAC;IACD;;;;;;OAMG;IACH,qBAAqB,EAAE,CAAC,KAAiB,EAAiB,EAAE;QAC1D,kBAAkB,CAAC,uBAAuB,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QACzD,OAAO,YAAY,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IACD;;;;;;OAMG;IACH,qBAAqB,EAAE,GAAwB,EAAE;QAC/C,kBAAkB,CAAC,uBAAuB,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QACzD,OAAO,YAAY,CAAC,qBAAqB,EAAE,CAAC;IAC9C,CAAC;IACD;;;;;;OAMG;IACH,4BAA4B,EAAE,CAAC,KAAiB,EAAiB,EAAE;QACjE,kBAAkB,CAAC,8BAA8B,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QAChE,OAAO,YAAY,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IACD;;;;;;OAMG;IACH,4BAA4B,EAAE,GAAwB,EAAE;QACtD,kBAAkB,CAAC,8BAA8B,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QAChE,OAAO,YAAY,CAAC,4BAA4B,EAAE,CAAC;IACrD,CAAC;IACD;;;;;;;OAOG;IACH,0BAA0B,EAAE,CAAC,UAAgC,EAAiB,EAAE;QAC9E,kBAAkB,CAAC,uBAAuB,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QACzD,OAAO,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;CACF,CAAC","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { ColorValue } from 'react-native';\n\nimport ExpoSystemUI from './ExpoSystemUI';\n\nconst assertIsOnPlatform = (functionName: string, onlyAvailableOn: typeof Platform['OS'][]) => {\n  if (!onlyAvailableOn.includes(Platform.OS)) {\n    throw new Error(\n      `\"${functionName}\" is only available on ${onlyAvailableOn.join(' or ')}! OS: ${Platform.OS}`\n    );\n  }\n};\n\n/**\n * Configures the device's System UI.\n *\n * On Android, the System UI contains the Navigation Bar and Status Bar, on iOS this contains the Home Indicator and Status Bar.\n */\nexport const SystemUI = {\n  /**\n   * Changes the Android Status Bar color.\n   * @example\n   * ```typescript\n   * SystemUI.setNavigationBarColor(\"white\");\n   * ```\n   */\n  setStatusBarColor: (color: ColorValue): Promise<void> => {\n    assertIsOnPlatform('setStatusBarColor', ['android']);\n    return ExpoSystemUI.setStatusBarColor(color);\n  },\n  /**\n   * Gets the Android Status Bar color.\n   * @example\n   * ```typescript\n   * const color = await SystemUI.getStatusBarColor();\n   * ```\n   */\n  getStatusBarColor: (): Promise<ColorValue> => {\n    assertIsOnPlatform('getStatusBarColor', ['android']);\n    return ExpoSystemUI.getStatusBarColor();\n  },\n  /**\n   * Changes the Android Navigation Bar color.\n   * @example\n   * ```typescript\n   * SystemUI.setNavigationBarColor(\"white\");\n   * ```\n   */\n  setNavigationBarColor: (color: ColorValue): Promise<void> => {\n    assertIsOnPlatform('setNavigationBarColor', ['android']);\n    return ExpoSystemUI.setNavigationBarColor(color);\n  },\n  /**\n   * Gets the Android Navigation Bar color.\n   * @example\n   * ```typescript\n   * const color = await SystemUI.getNavigationBarColor();\n   * ```\n   */\n  getNavigationBarColor: (): Promise<ColorValue> => {\n    assertIsOnPlatform('getNavigationBarColor', ['android']);\n    return ExpoSystemUI.getNavigationBarColor();\n  },\n  /**\n   * Changes the Android Navigation Bar's Divider color.\n   * @example\n   * ```typescript\n   * SystemUI.setNavigationBarDividerColor(\"red\");\n   * ```\n   */\n  setNavigationBarDividerColor: (color: ColorValue): Promise<void> => {\n    assertIsOnPlatform('setNavigationBarDividerColor', ['android']);\n    return ExpoSystemUI.setNavigationBarDividerColor(color);\n  },\n  /**\n   * Gets the Android Navigation Bar's Divider color.\n   * @example\n   * ```typescript\n   * const color = await SystemUI.getNavigationBarDividerColor();\n   * ```\n   */\n  getNavigationBarDividerColor: (): Promise<ColorValue> => {\n    assertIsOnPlatform('getNavigationBarDividerColor', ['android']);\n    return ExpoSystemUI.getNavigationBarDividerColor();\n  },\n  /**\n   * Changes the Android Navigation Bar visibility.\n   *\n   * @example\n   * ```typescript\n   * SystemUI.setVisibility(\"hidden\");\n   * ```\n   */\n  setNavigationBarVisibility: (visibility: 'visible' | 'hidden'): Promise<void> => {\n    assertIsOnPlatform('setSystemUiVisibility', ['android']);\n    return ExpoSystemUI.setSystemUiVisibility(visibility);\n  },\n};\n"]}