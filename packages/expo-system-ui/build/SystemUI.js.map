{"version":3,"file":"SystemUI.js","sourceRoot":"","sources":["../src/SystemUI.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { ColorValue, processColor } from 'react-native';\n\nimport ExpoSystemUI from './ExpoSystemUI';\n\nconst assertIsOnPlatform = (functionName: string, onlyAvailableOn: typeof Platform['OS'][]) => {\n  if (!onlyAvailableOn.includes(Platform.OS)) {\n    throw new Error(\n      `\"${functionName}\" is only available on ${onlyAvailableOn.join(' or ')}! OS: ${Platform.OS}`\n    );\n  }\n};\n\nexport type SystemUIBehavior = 'overlay-swipe' | 'inset-swipe' | 'inset-touch';\n\nexport type NavigationBarForegroundStyle = 'light' | 'dark';\nexport type NavigationBarVisibility = 'visible' | 'hidden';\nexport type StatusBarForegroundStyle = 'light' | 'dark';\nexport type StatusBarVisibility = 'visible' | 'hidden';\n\n/**\n * * \"light\": Light Mode\n * * \"dark\": Dark/Night Mode\n * * \"auto\": Follow System mode, automatically switch to dark mode.\n * * \"unspecified\": Default\n */\n// export type Appearance = 'light' | 'dark' | 'auto' | 'default';\n\n/**\n * Changes the Android Status Bar's background color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * SystemUI.setStatusBarBackgroundColor(\"white\");\n * ```\n */\nexport function setStatusBarBackgroundColor(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setStatusBarBackgroundColor', ['android']);\n  const colorNumber = processColor(color);\n  return ExpoSystemUI.setStatusBarBackgroundColor(colorNumber);\n}\n/**\n * Gets the Android Status Bar's background color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const color = await SystemUI.getStatusBarBackgroundColor();\n * ```\n */\nexport function getStatusBarBackgroundColor(): Promise<ColorValue> {\n  assertIsOnPlatform('getStatusBarBackgroundColor', ['android']);\n  return ExpoSystemUI.getStatusBarBackgroundColor();\n}\n\n/**\n * Changes the Android Navigation Bar's background color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * SystemUI.setNavigationBarBackgroundColor(\"white\");\n * ```\n */\nexport function setNavigationBarBackgroundColor(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setNavigationBarBackgroundColor', ['android']);\n  const colorNumber = processColor(color);\n  return ExpoSystemUI.setNavigationBarBackgroundColor(colorNumber);\n}\n/**\n * Gets the Android Navigation Bar's background color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const color = await SystemUI.getNavigationBarBackgroundColor();\n * ```\n */\nexport function getNavigationBarBackgroundColor(): Promise<ColorValue> {\n  assertIsOnPlatform('getNavigationBarBackgroundColor', ['android']);\n  return ExpoSystemUI.getNavigationBarBackgroundColor();\n}\n\n/**\n * Changes the Android Navigation Bar's Divider color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * SystemUI.setNavigationBarDividerColor(\"red\");\n * ```\n */\nexport function setNavigationBarDividerColor(color: ColorValue): Promise<void> {\n  assertIsOnPlatform('setNavigationBarDividerColor', ['android']);\n  const colorNumber = processColor(color);\n  return ExpoSystemUI.setNavigationBarDividerColor(colorNumber);\n}\n\n/**\n * Gets the Android Navigation Bar's Divider color.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const color = await SystemUI.getNavigationBarDividerColor();\n * ```\n */\nexport function getNavigationBarDividerColor(): Promise<ColorValue> {\n  assertIsOnPlatform('getNavigationBarDividerColor', ['android']);\n  return ExpoSystemUI.getNavigationBarDividerColor();\n}\n\n/**\n * Changes the Android Navigation Bar's visibility.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * SystemUI.setNavigationBarVisibility(\"hidden\");\n * ```\n */\nexport function setNavigationBarVisibility(visibility: NavigationBarVisibility): Promise<void> {\n  assertIsOnPlatform('setNavigationBarVisibility', ['android']);\n  return ExpoSystemUI.setNavigationBarVisibility(visibility);\n}\n\n/**\n * Changes the Android Status Bar's visibility.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * SystemUI.setStatusBarVisibility(\"hidden\");\n * ```\n */\nexport function setStatusBarVisibility(visibility: StatusBarVisibility): Promise<void> {\n  assertIsOnPlatform('setStatusBarVisibility', ['android']);\n  return ExpoSystemUI.setStatusBarVisibility(visibility);\n}\n\n/**\n * Changes the Android Navigation Bar's foreground style.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * SystemUI.setNavigationBarForegroundStyle(\"light\");\n * ```\n */\nexport function setNavigationBarForegroundStyle(\n  style: NavigationBarForegroundStyle\n): Promise<void> {\n  assertIsOnPlatform('setNavigationBarForegroundStyle', ['android']);\n  return ExpoSystemUI.setNavigationBarForegroundStyle(style);\n}\n/**\n * Gets the Android Navigation Bar's foreground style.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const style = await SystemUI.getNavigationBarForegroundStyle();\n * ```\n */\nexport function getNavigationBarForegroundStyle(): Promise<NavigationBarForegroundStyle> {\n  assertIsOnPlatform('getNavigationBarForegroundStyle', ['android']);\n  return ExpoSystemUI.getNavigationBarForegroundStyle();\n}\n\n/**\n * Changes the Android Status Bar's foreground style.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * SystemUI.setStatusBarForegroundStyle(\"light\");\n * ```\n */\nexport function setStatusBarForegroundStyle(style: StatusBarForegroundStyle): Promise<void> {\n  assertIsOnPlatform('setStatusBarForegroundStyle', ['android']);\n  return ExpoSystemUI.setStatusBarForegroundStyle(style);\n}\n/**\n * Gets the Android Status Bar's foreground style.\n *\n * @platform android\n *\n * @example\n * ```typescript\n * const style = await SystemUI.getStatusBarForegroundStyle();\n * ```\n */\nexport function getStatusBarForegroundStyle(): Promise<StatusBarForegroundStyle> {\n  assertIsOnPlatform('getStatusBarForegroundStyle', ['android']);\n  return ExpoSystemUI.getStatusBarForegroundStyle();\n}\n\n/**\n * Sets whether the App should draw behind the Status Bar and Navigation Bar.\n *\n * When drawing behind the Status and Navigation Bar, make sure to adjust the Safe Area Insets accordingly.\n *\n * This is often used in conjunction with `setStatusBarBackgroundColor` and `setNavigationBarBackgroundColor`\n * to enable an \"edge-to-edge\" mode by making the System UI transparent and letting your App draw beneath.\n *\n * @platform android\n *\n * @example\n * ```ts\n * // enables edge-to-edge mode\n * SystemUI.setDrawsBehindSystemUI(true)\n * // transparent backgrounds to see through\n * SystemUI.setStatusBarBackgroundColor('#ffffff00')\n * SystemUI.setNavigationBarBackgroundColor('#ffffff00')\n * ```\n */\nexport function setDrawsBehindSystemUI(drawsBehindSystemUI: boolean): Promise<void> {\n  assertIsOnPlatform('setDrawsBehindSystemUI', ['android']);\n  return ExpoSystemUI.setDrawsBehindSystemUI(drawsBehindSystemUI);\n}\n\n/**\n * Gets whether the App draws behind the Status Bar and Navigation Bar.\n *\n * @platform android\n */\nexport function getDrawsBehindSystemUI(): Promise<boolean> {\n  assertIsOnPlatform('getDrawsBehindSystemUI', ['android']);\n  return ExpoSystemUI.getDrawsBehindSystemUI();\n}\n\n/**\n * Sets the behavior of the Status Bar and Navigation Bar when they are hidden and the user wants to reveal them.\n *\n * For example, if the Navigation Bar is hidden (`setNavigationBarVisibility(false)`) and the System UI behavior\n * is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the Navigation Bar.\n *\n * * `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.\n * * `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n * * `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n *\n * @platform android\n */\nexport function setSystemUIBehavior(behavior: SystemUIBehavior): Promise<void> {\n  assertIsOnPlatform('setSystemUIBehavior', ['android']);\n  return ExpoSystemUI.setSystemUIBehavior(behavior);\n}\n\n/**\n * Gets the behavior of the Status Bar and Navigation Bar when the user swipes or touches the screen.\n *\n * @platform android\n */\nexport function getSystemUIBehavior(): Promise<SystemUIBehavior> {\n  assertIsOnPlatform('getSystemUIBehavior', ['android']);\n  return ExpoSystemUI.getSystemUIBehavior();\n}\n\n// FIXME(Marc): Setting appearance crashes on Android because of RNScreens.\n//  See `SystemUIModule.kt`'s `setAppearance` function for details.\n// /**\n//  * Sets the App's appearance.\n//  *\n//  * @example\n//  * ```typescript\n//  * SystemUI.setAppearance(\"dark\");\n//  * ```\n//  */\n// setAppearance: (appearance: Appearance): Promise<void> => {\n//   assertIsOnPlatform('setAppearance', ['android']);\n//   return ExpoSystemUI.setAppearance(appearance);\n// },\n// /**\n//  * Gets the App's appearance.\n//  * @example\n//  * ```typescript\n//  * const appearance = await SystemUI.getAppearance();\n//  * ```\n//  */\n// getAppearance: (): Promise<Appearance> => {\n//   assertIsOnPlatform('getAppearance', ['android']);\n//   return ExpoSystemUI.getAppearance();\n// },\n"]}